diff --git a/lib/userbin.rb b/lib/userbin.rb
index 21164fd..233a1d2 100644
--- a/lib/userbin.rb
+++ b/lib/userbin.rb
@@ -25,7 +25,9 @@ end
 require 'userbin/models/model'
 require 'userbin/models/challenge'
 require 'userbin/models/channel'
-require 'userbin/models/token'
+require 'userbin/models/monitoring'
+require 'userbin/models/pairing'
+require 'userbin/models/recovery_code'
 require 'userbin/models/session'
+require 'userbin/models/token'
 require 'userbin/models/user'
-require 'userbin/models/monitoring'
diff --git a/lib/userbin/client.rb b/lib/userbin/client.rb
index f850ce7..93c0f82 100644
--- a/lib/userbin/client.rb
+++ b/lib/userbin/client.rb
@@ -36,23 +36,29 @@ module Userbin
       Userbin::SessionToken.new(token) if token
     end
 
-    def authorize!(user_id, user_attrs = {})
+    def identify(user_id)
       # The user identifier is used in API paths so it needs to be cleaned
       user_id = URI.encode(user_id.to_s)
 
       @session_store.user_id = user_id
+    end
 
-      unless session_token
-        # Create a session, and implicitly a user with user_attrs
-        session = Userbin::Session.post(
-          "users/#{user_id}/sessions", user: user_attrs)
+    def login(user_id, user_attrs = {})
+      # Clear the session token if any
+      self.session_token = nil
 
-        # Set the session token for use in all subsequent requests
-        self.session_token = session.token
-      else
-        if session_token.expired?
-          Userbin::Monitoring.heartbeat
-        end
+      identify(user_id)
+
+      session = Userbin::Session.post(
+        "users/#{@session_store.user_id}/sessions", user: user_attrs)
+
+      # Set the session token for use in all subsequent requests
+      self.session_token = session.token
+    end
+
+    def authorize
+      if session_token.expired?
+        Userbin::Monitoring.heartbeat
       end
     end
 
@@ -122,5 +128,37 @@ module Userbin
       session_token.has_challenge?
     end
 
+    def two_factor_enabled?
+      session_token.mfa_enabled?
+    end
+
+    def two_factor_required?
+      session_token.needs_challenge?
+    end
+
+    def sessions
+      Userbin::User.new('current').sessions
+    end
+
+    def pairings
+      Userbin::User.new('current').pairings
+    end
+
+    def channels
+      Userbin::User.new('current').channels
+    end
+
+    def recovery_codes
+      Userbin::User.new('current').recovery_codes
+    end
+
+    def enable_mfa
+      Userbin::User.new('current').enable_mfa
+    end
+
+    def disable_mfa
+      Userbin::User.new('current').disable_mfa
+    end
+
   end
 end
diff --git a/lib/userbin/errors.rb b/lib/userbin/errors.rb
index c287cce..74374fa 100644
--- a/lib/userbin/errors.rb
+++ b/lib/userbin/errors.rb
@@ -6,7 +6,7 @@ class Userbin::ConfigurationError < Userbin::Error; end
 
 class Userbin::ApiError < Userbin::Error; end
 
-class Userbin::BadRequest < Userbin::ApiError; end
+class Userbin::BadRequestError < Userbin::ApiError; end
 class Userbin::UnauthorizedError < Userbin::ApiError; end
 class Userbin::ForbiddenError < Userbin::ApiError; end
 class Userbin::NotFoundError < Userbin::ApiError; end
diff --git a/lib/userbin/models/channel.rb b/lib/userbin/models/channel.rb
index 77f9142..58ca095 100644
--- a/lib/userbin/models/channel.rb
+++ b/lib/userbin/models/channel.rb
@@ -1,5 +1,6 @@
 module Userbin
   class Channel < Model
-    has_one :token
+    collection_path "users/:user_id/channels"
+    belongs_to :user
   end
 end
diff --git a/lib/userbin/models/pairing.rb b/lib/userbin/models/pairing.rb
new file mode 100644
index 0000000..739b9c3
--- /dev/null
+++ b/lib/userbin/models/pairing.rb
@@ -0,0 +1,7 @@
+module Userbin
+  class Pairing < Model
+    collection_path "users/:user_id/pairings"
+    instance_post :verify
+    belongs_to :user
+  end
+end
diff --git a/lib/userbin/models/recovery_code.rb b/lib/userbin/models/recovery_code.rb
new file mode 100644
index 0000000..2b76300
--- /dev/null
+++ b/lib/userbin/models/recovery_code.rb
@@ -0,0 +1,4 @@
+module Userbin
+  class RecoveryCode < Model
+  end
+end
diff --git a/lib/userbin/models/user.rb b/lib/userbin/models/user.rb
index 8612b19..7cdf7ea 100644
--- a/lib/userbin/models/user.rb
+++ b/lib/userbin/models/user.rb
@@ -3,7 +3,11 @@ module Userbin
     custom_post :import
     instance_post :lock
     instance_post :unlock
+    instance_post :enable_mfa
+    instance_post :disable_mfa
 
+    has_many :channels
+    has_many :pairings
     has_many :sessions
   end
 end
diff --git a/lib/userbin/request.rb b/lib/userbin/request.rb
index 4c75a33..ee1a192 100644
--- a/lib/userbin/request.rb
+++ b/lib/userbin/request.rb
@@ -138,6 +138,9 @@ module Userbin
           when 404
             raise Userbin::NotFoundError, response[:message]
           when 419
+            # session token is invalid so clear it
+            RequestStore.store[:userbin].session_token = nil
+
             raise Userbin::UserUnauthorizedError, response[:message]
           when 422
             raise Userbin::InvalidParametersError, response[:message]
diff --git a/lib/userbin/session_token.rb b/lib/userbin/session_token.rb
index ba250ab..147394b 100644
--- a/lib/userbin/session_token.rb
+++ b/lib/userbin/session_token.rb
@@ -24,6 +24,10 @@ module Userbin
       !!@jwt.payload['chg']
     end
 
+    def mfa_enabled?
+      @jwt.payload['mfa'] == 1
+    end
+
     def challenge_type
       @jwt.payload['chg']['typ'].to_sym if has_challenge?
     end
diff --git a/lib/userbin/version.rb b/lib/userbin/version.rb
index 079e00a..f23f181 100644
--- a/lib/userbin/version.rb
+++ b/lib/userbin/version.rb
@@ -1,3 +1,3 @@
 module Userbin
-  VERSION = "1.1.4"
+  VERSION = "1.2.0"
 end
